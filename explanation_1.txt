Active Directory:
What I did here was use recursion to be able to check each group's group elements. When I got to a group, I then used a for loop to be able to iterate through each of its groups until a certain group had no more subgroups. While at each group I would check if it contained the user we are looking for. If it did then return True and end the recursion. Its time complexity is O(n) because I will be checking every single group and its elements. The space complexity is O(m), where m represents the depth of the recursive tree. The worst we will have to store is the node with the longest depth since we will be storing every recurrence in the memory stack. The choice of data strucutre was a list to be able to to store the groups that are contained in a group. This made it easier for me to keep the data organized and it also made it easier to traverse when using recursion.