File Recursion:
What I did here was treat the folder like a tree. With each folder/file representing a node and then I proceeded to recursively check each of the folders by passing the list and the current path and joining it with the current folder/file until it reached a 'leaf' or a file and when that leaf is reached, I checked if it ended with '.c'. Recursively doing this allowed me to check each possible subdirectory. This has a time complexity of O(n) because it has to check every single node. The time complexity will be O(n) because I will be checking every element that is present. This has a space complexity of O(n) because again, a recursive tree 
will be built for each element in the file directory. The choice of data structure was a list because I then can store every file that ends in '.c'.