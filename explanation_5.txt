LRU Cache:
I decided to use a hash table because of how fast its insertion and lookup time is and also decided to use a doubly linked list to be able to keep track of the least recently used items. When a item was found or inserted it was placed at the front of the list. The hash table's indices were holding a node that was linked in the doubly linked list. This allowed me to move nodes around in constant time. This has a time complexity of O(1). This has a HashTable that stores 5 elements or n elements and also has a linked list that stores nodes. So, this will use 2 * n amount of space. So, the space complexity is O(n). The choice of data structure that I used was a orderedDict to be able to keep track of the items and indices that are stored and used. The orderedDict allowed me to organize the dictinary by when the item was inserted. So, it made it easier to pop and add elements.