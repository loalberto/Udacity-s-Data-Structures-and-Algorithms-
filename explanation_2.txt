Blockchain: 
What I did here was treat the problem like a linked list. I had a head for the linkedlist and used the next variable to be able to reference the next block. All while linking the new block with the previous_hash of the previous block. I did that by keeping track of the most recent added block and then took its hash and set the current block's previous_hash value to it. Having the next variable helped to traverse the list and helped to be able to print out the results. Its time complexity to insert will be O(1) because I am keeping track of both the recent node and the end node and so, inserting will be constant. But, the overall time complexity will be O(n) because I will traverse through each node to be able to print them. It has a space complexity of O(n) because I am storing two blocks and I am doing this for every new element that gets added. The choice of the data structure that I used was a linked list because this problem wants to link each block with the previous hash code. Linked list is the most similar data structure that allows the ability to link nodes.